services:
    sonata.admin.tournament.tournament:
        class: InsaLan\TournamentBundle\Admin\TournamentAdmin
        tags:
            - { name: sonata.admin, manager_type: orm, group: "Tournois", label: "Tournoi" }
        arguments:
            - ~
            - InsaLan\TournamentBundle\Entity\Tournament
            - ~
        calls:
            - [ setTranslationDomain, [InsaLanTournamentBundle]]

    sonata.admin.tournament.groupstage:
        class: InsaLan\TournamentBundle\Admin\GroupStageAdmin
        tags:
            - { name: sonata.admin, manager_type: orm, group: "Tournois", label: "Phase poules" }
        arguments:
            - ~
            - InsaLan\TournamentBundle\Entity\GroupStage
            - ~
        calls:
            - [ setTranslationDomain, [InsaLanTournamentBundle]]

    sonata.admin.tournament.group:
        class: InsaLan\TournamentBundle\Admin\GroupAdmin
        tags:
            - { name: sonata.admin, manager_type: orm, group: "Tournois", label: "Poule" }
        arguments:
            - ~
            - InsaLan\TournamentBundle\Entity\Group
            - ~
        calls:
            - [ setTranslationDomain, [InsaLanTournamentBundle]]

    sonata.admin.tournament.player:
        class: InsaLan\TournamentBundle\Admin\PlayerAdmin
        tags:
            - { name: sonata.admin, manager_type: orm, group: "Tournois", label: "Joueur" }
        arguments:
            - ~
            - InsaLan\TournamentBundle\Entity\Player
            - ~
        calls:
            - [ setTranslationDomain, [InsaLanTournamentBundle]]

    sonata.admin.tournament.manager:
        class: InsaLan\TournamentBundle\Admin\ManagerAdmin
        tags:
            - { name: sonata.admin, manager_type: orm, group: "Tournois", label: "Manager" }
        arguments:
            - ~
            - InsaLan\TournamentBundle\Entity\Manager
            - ~
        calls:
            - [ setTranslationDomain, [InsaLanTournamentBundle]]

    sonata.admin.tournament.team:
        class: InsaLan\TournamentBundle\Admin\TeamAdmin
        tags:
            - { name: sonata.admin, manager_type: orm, group: "Tournois", label: "Equipes" }
        arguments:
            - ~
            - InsaLan\TournamentBundle\Entity\Team
            - ~
        calls:
            - [ setTranslationDomain, [InsaLanTournamentBundle]]

    sonata.admin.tournament.match:
        class: InsaLan\TournamentBundle\Admin\MatchAdmin
        tags:
            - { name: sonata.admin, manager_type: orm, group: "Tournois", label: "Matchs" }
        arguments:
            - ~
            - InsaLan\TournamentBundle\Entity\Match
            - InsaLanTournamentBundle:CRUD
        calls:
            - [ setTranslationDomain, [InsaLanTournamentBundle]]

    sonata.admin.tournament.round:
        class: InsaLan\TournamentBundle\Admin\RoundAdmin
        tags:
            - { name: sonata.admin, manager_type: orm, group: "Tournois", label: "Rounds" }
        arguments:
            - ~
            - InsaLan\TournamentBundle\Entity\Round
            - ~
        calls:
            - [ setTranslationDomain, [InsaLanTournamentBundle]]

    sonata.admin.tournament.score:
        class: InsaLan\TournamentBundle\Admin\ScoreAdmin
        tags:
            - { name: sonata.admin, manager_type: orm, group: "Tournois", label: "Score", show_in_dashboard: false }
        arguments:
            - ~
            - InsaLan\TournamentBundle\Entity\Score
            - ~
        calls:
            - [ setTranslationDomain, [InsaLanTournamentBundle]]


    sonata.admin.tournament.knockout:
        class: InsaLan\TournamentBundle\Admin\KnockoutAdmin
        tags:
            - { name: sonata.admin, manager_type: orm, group: "Tournois", label: "Arbres" }
        arguments:
            - ~
            - InsaLan\TournamentBundle\Entity\Knockout
            - ~
        calls:
            - [ setTranslationDomain, [InsaLanTournamentBundle]]

    sonata.admin.tournament.bundle:
        class: InsaLan\TournamentBundle\Admin\BundleAdmin
        tags:
            - { name: sonata.admin, manager_type: orm, group: "Tournois", label: "Bundle" }
        arguments:
            - ~
            - InsaLan\TournamentBundle\Entity\Bundle
            - ~
        calls:
            - [ setTranslationDomain, [InsaLanTournamentBundle]]


    insalan.tournament.participant_validator:
        class: InsaLan\TournamentBundle\Subscriber\ParticipantValidator
        tags:
            - { name: doctrine.event_subscriber }

    validator.unique.existing_lol_id:
        class: InsaLan\TournamentBundle\Validator\Constraint\ExistingLolIdValidator
        calls:
            - [setLolApi, ["@insalan.lol"]]
        tags:
           - { name: validator.constraint_validator, alias: existing_lol_id }

    insalan.tournament.pvp_net:
        class: InsaLan\TournamentBundle\Service\PvpNet
        arguments: [@insalan.lol]

    insalan.tournament.placement:
        class: InsaLan\TournamentBundle\Service\Placement
